package finalprojectdb;

public class NewDriver {
	
	public static void main(String args[])
	{
		String tupleValues[][] = {{"Name","Apple"},{"Price","100"}};
		String valuesToFind[][] = {
				{"Name","Apple","String","="},
				{"Price","90","int",">"},
				{"Price","100","int","="},
				{"Price","40","int",">"},
				{"Price","120","int",">"},
				{"Price","60","int","<"},
				{"Price","130","int","="},
				};
		
		Tuple t = new Tuple();
		NaiveSigGen nsg = new NaiveSigGen();
		t.addMembersAndValues(tupleValues);
		
		long startTime = System.nanoTime();
		nsg.initializeQueryFieldsToCheck(valuesToFind);
		int sign[] = nsg.generateSig(t);
		long endTime = System.nanoTime();
		System.out.println("Naive Sign Generator took " + (endTime - startTime) + " nanoseconds");
		
		
//		System.out.println("Sign values generated by Naive are ");
//		for(int i=0; i<sign.length;i++)
//		{
//			System.out.print(sign[i]);
//		}
//		System.out.println();
		
		
		OptSigGen osg = new OptSigGen();
		
		t.addMembersAndValues(tupleValues);
//		osg.resetMetaDataArrays();
		osg.initializeQueryFieldsToCheck(valuesToFind);
		osg.valueDistiller(valuesToFind);
//		osg.printMetaDataHolders();
		//osg.randomDriverFunction();
		System.out.println();
		
		startTime = System.nanoTime();
		osg.triggerSignatureSet(t);
		endTime = System.nanoTime();
		System.out.println("Optimized Signature Generator took " + (endTime - startTime) + " nanoseconds");
		
		
//		osg.printSignBits();
//		osg.printEqHash();

	}

}
